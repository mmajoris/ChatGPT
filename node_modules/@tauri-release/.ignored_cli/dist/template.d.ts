declare const RELEASE_YML_TXT = "name: Release CI\n\non:\n  push:\n    # Sequence of patterns matched against refs/tags\n    tags:\n      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10\n\njobs:\n  create-release:\n    runs-on: ubuntu-latest\n    outputs:\n      RELEASE_UPLOAD_ID: ${{ steps.create_release.outputs.id }}\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Query version number\n        id: get_version\n        shell: bash\n        run: |\n          echo \"using version tag ${GITHUB_REF:10}\"\n          echo ::set-output name=version::\"${GITHUB_REF:10}\"\n\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: '${{ steps.get_version.outputs.VERSION }}'\n          # \uD83D\uDCDD: Edit Name\n          release_name: 'App ${{ steps.get_version.outputs.VERSION }}'\n          body: 'See the assets to download this version and install.'\n\n  build-tauri:\n    needs: create-release\n    strategy:\n      fail-fast: false\n      matrix:\n        platform: [macos-latest, ubuntu-latest, windows-latest]\n\n    runs-on: ${{ matrix.platform }}\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Setup node\n        uses: actions/setup-node@v1\n        with:\n          node-version: 16\n\n      - name: Install Rust stable\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n\n      # Rust cache\n      - uses: Swatinem/rust-cache@v1\n\n      - name: install dependencies (ubuntu only)\n        if: matrix.platform == 'ubuntu-latest'\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf\n\n      # # Install wasm-pack\n      # - uses: jetli/wasm-pack-action@v0.3.0\n      #   with:\n      #     # Optional version of wasm-pack to install(eg. 'v0.9.1', 'latest')\n      #     version: v0.9.1\n\n      # - name: Install rsw\n      #   run: cargo install rsw\n\n      - name: Get yarn cache directory path\n        id: yarn-cache-dir-path\n        run: echo \"::set-output name=dir::$(yarn config get cacheFolder)\"\n\n      - name: Yarn cache\n        uses: actions/cache@v2\n        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)\n        with:\n          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}\n          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}\n          restore-keys: |\n            ${{ runner.os }}-yarn-\n\n      - name: Install app dependencies and build it\n        run: yarn && yarn build\n\n      - name: fix linux build\n        if: matrix.platform == 'ubuntu-latest'\n        run: |\n          yarn fix:linux\n\n      - uses: tauri-apps/tauri-action@v0.3\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          # \uD83D\uDCDD: signer https://tauri.app/v1/guides/distribution/updater#signing-updates\n          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}\n          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}\n        with:\n          releaseId: ${{ needs.create-release.outputs.RELEASE_UPLOAD_ID }}\n\n  updater:\n    runs-on: ubuntu-latest\n    needs: [create-release, build-tauri]\n\n    steps:\n      - uses: actions/checkout@v2\n      - run: yarn\n      - run: yarn updater --token=${{ secrets.GITHUB_TOKEN }}\n\n      - name: Deploy install.json\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          # \uD83D\uDCDD: Edit the deployment directory\n          publish_dir: ./updater\n          force_orphan: true\n";

export { RELEASE_YML_TXT };
