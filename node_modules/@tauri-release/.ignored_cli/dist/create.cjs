'use strict';

const fs = require('fs');
const path = require('path');
const utils = require('./shared/cli.de4d4f3c.cjs');
const template = require('./template.cjs');
require('module');

async function create() {
  const argv = utils.$argv();
  const type = argv._[1];
  if (type === "log") {
    let logPath = utils.UPDATE_LOG_PATH;
    if (argv.logfile) {
      logPath = path.join(utils.ROOT_PATH, argv.logfile);
      if (!fs.existsSync(path.dirname(argv.logfile))) {
        fs.mkdirSync(path.dirname(argv.logfile), { recursive: true });
      } else {
        console.log(utils.$.red("[\u{1F4A2} new]"), utils.$.yellow(utils.relativePath(logPath)), "File already exists.");
        process.exit(0);
      }
    }
    fs.writeFileSync(logPath, `# UPDATE LOG

## v0.1.1

- feat: xx
- fix: xx

## v0.1.0

test
`, "utf8");
    console.log(utils.$.green("[\u2728 new]"), utils.$.yellow(utils.relativePath(logPath)));
  }
  if (type === "action") {
    let ymlPath = utils.RELEASE_YML_PATH;
    if (argv.actionfile) {
      ymlPath = path.join(utils.ROOT_PATH, argv.actionfile);
    }
    if (!fs.existsSync(path.dirname(ymlPath))) {
      fs.mkdirSync(path.dirname(ymlPath), { recursive: true });
    } else {
      console.log(utils.$.red("[\u{1F4A2} new]"), utils.$.yellow(utils.relativePath(ymlPath)), "File already exists.");
      process.exit(0);
    }
    fs.writeFileSync(ymlPath, template.RELEASE_YML_TXT, "utf8");
    console.log(utils.$.green("[\u2728 new]"), utils.$.yellow(utils.relativePath(ymlPath)));
  }
}

module.exports = create;
