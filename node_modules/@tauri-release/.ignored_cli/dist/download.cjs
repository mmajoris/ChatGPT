'use strict';

const path = require('path');
const fs = require('fs');
const utils = require('./shared/cli.de4d4f3c.cjs');
require('module');

function download() {
  const argv = utils.$argv();
  if (!argv.mdfile) {
    console.log(utils.$.red("[\u{1F4A2} download]"), `Could not found file`);
    return;
  }
  const fileList = argv.mdfile.split(",");
  if (fileList.length > 0) {
    fileList.forEach(write);
  }
}
function write(filePath, idx) {
  const startRe = `<!-- tr-download-start -->`;
  const endRe = `<!-- tr-download-end -->`;
  const argv = utils.$argv();
  let ignoreLines = [];
  if (argv[`f${idx + 1}`]) {
    ignoreLines = `${argv[`f${idx + 1}`]}`?.split(",")?.map((i) => +i);
  }
  const file = path.join(utils.ROOT_PATH, filePath);
  if (!fs.existsSync(file)) {
    console.log(utils.$.red("[\u{1F4A2} download]"), `Could not found ${utils.$.yellow(file)}`);
    process.exit(0);
  }
  const content = fs.readFileSync(file, "utf8").split("\n");
  let isStart = false;
  for (let i = 0; i < content.length; i++) {
    const line = content[i];
    if (new RegExp(startRe).test(line)) {
      isStart = true;
    }
    if (isStart) {
      if (!ignoreLines.includes(i + 1)) {
        content[i] = content[i].replace(/(\d+).(\d+).(\d+)/g, argv.version);
      } else {
        console.log(utils.$.green("[\u2935\uFE0F  download]"), "ignore line number", utils.$.green(i + 1));
      }
    }
    if (new RegExp(endRe).test(line)) {
      break;
    }
  }
  fs.writeFileSync(file, content.join("\n"), "utf8");
  console.log(utils.$.green("[\u2705 download]"), utils.$.yellow(argv.version), utils.$.gray(file));
}

module.exports = download;
