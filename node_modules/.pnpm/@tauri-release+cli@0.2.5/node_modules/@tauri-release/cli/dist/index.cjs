'use strict';

const utils = require('./shared/cli.de4d4f3c.cjs');
const path = require('path');
const url = require('url');
const release = require('./release.cjs');
const updater = require('./updater.cjs');
const override = require('./override.cjs');
const create = require('./create.cjs');
const download = require('./download.cjs');
require('module');
require('child_process');
require('fs');
require('./updatelog.cjs');
require('node-fetch');
require('@actions/github');
require('lodash');
require('./template.cjs');

const __filename$1 = url.fileURLToPath((typeof document === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : (document.currentScript && document.currentScript.src || new URL('index.cjs', document.baseURI).href)));
const __dirname$1 = path.dirname(__filename$1);
function init() {
  const argv = utils.$argv();
  const subcmd = argv._[0];
  if (argv.h || argv.help) {
    cliHelp();
    return;
  }
  try {
    switch (subcmd) {
      case "release":
        release();
        break;
      case "updater":
        updater();
        break;
      case "override":
        override();
        break;
      case "new":
        create();
        break;
      case "download":
        download();
        break;
      default:
        cliHelp();
    }
  } catch (e) {
    console.error(e);
  }
}
init();
function cliHelp() {
  const pkgJson = utils.require(path.join(__dirname$1, "..", "package.json"));
  console.log(`${utils.$.green("tauir-release (tr)")}:
${utils.$.gray("https://github.com/lencx/tauri-release")}
${utils.$.gray(`v${pkgJson.version}`)} tauri release toolchain

usage: tr [subcommand] [options]

options:
  ${utils.$.green("new")}                      generate file, support custom path
   ${utils.$.gray("log [--logfile]         UPDATE_LOG.md (default)")}
   ${utils.$.gray("action [--actionfile]   .github/workflows/release.yml (default)")}
  ${utils.$.green("release")}                  tauri release
  ${utils.$.green("download")}                 edit version number
  ${utils.$.green("updater")}                  generate tauri update file
  ${utils.$.green("-h, --help")}               print node command line options
`);
}

exports.__dirname = __dirname$1;
