import fs from 'fs';
import path from 'path';
import { $ as $argv, R as ROOT_PATH, a as $, r as relativePath, U as UPDATE_LOG_PATH, b as RELEASE_YML_PATH } from './shared/cli.8f57657e.mjs';
import { RELEASE_YML_TXT } from './template.mjs';
import 'module';

async function create() {
  const argv = $argv();
  const type = argv._[1];
  if (type === "log") {
    let logPath = UPDATE_LOG_PATH;
    if (argv.logfile) {
      logPath = path.join(ROOT_PATH, argv.logfile);
      if (!fs.existsSync(path.dirname(argv.logfile))) {
        fs.mkdirSync(path.dirname(argv.logfile), { recursive: true });
      } else {
        console.log($.red("[\u{1F4A2} new]"), $.yellow(relativePath(logPath)), "File already exists.");
        process.exit(0);
      }
    }
    fs.writeFileSync(logPath, `# UPDATE LOG

## v0.1.1

- feat: xx
- fix: xx

## v0.1.0

test
`, "utf8");
    console.log($.green("[\u2728 new]"), $.yellow(relativePath(logPath)));
  }
  if (type === "action") {
    let ymlPath = RELEASE_YML_PATH;
    if (argv.actionfile) {
      ymlPath = path.join(ROOT_PATH, argv.actionfile);
    }
    if (!fs.existsSync(path.dirname(ymlPath))) {
      fs.mkdirSync(path.dirname(ymlPath), { recursive: true });
    } else {
      console.log($.red("[\u{1F4A2} new]"), $.yellow(relativePath(ymlPath)), "File already exists.");
      process.exit(0);
    }
    fs.writeFileSync(ymlPath, RELEASE_YML_TXT, "utf8");
    console.log($.green("[\u2728 new]"), $.yellow(relativePath(ymlPath)));
  }
}

export { create as default };
