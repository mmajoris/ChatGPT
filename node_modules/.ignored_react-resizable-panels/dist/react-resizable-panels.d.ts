import { RefObject, CSSProperties, ElementType, ReactNode } from "react";
type Direction = "horizontal" | "vertical";
type PanelGroupOnLayout = (sizes: number[]) => void;
type PanelOnCollapse = (collapsed: boolean) => void;
type PanelOnResize = (size: number) => void;
type PanelData = {
    callbacksRef: RefObject<{
        onCollapse: PanelOnCollapse | null;
        onResize: PanelOnResize | null;
    }>;
    collapsible: boolean;
    defaultSize: number;
    id: string;
    maxSize: number;
    minSize: number;
    order: number | null;
};
type ResizeEvent = KeyboardEvent | MouseEvent | TouchEvent;
export type PanelProps = {
    children?: ReactNode;
    className?: string;
    collapsible?: boolean;
    defaultSize?: number | null;
    id?: string | null;
    maxSize?: number;
    minSize?: number;
    onCollapse?: PanelOnCollapse | null;
    onResize?: PanelOnResize | null;
    order?: number | null;
    style?: CSSProperties;
    tagName?: ElementType;
};
export type ImperativePanelHandle = {
    collapse: () => void;
    expand: () => void;
    getCollapsed(): boolean;
    getSize(): number;
    resize: (percentage: number) => void;
};
export const Panel: import("react").ForwardRefExoticComponent<PanelProps & import("react").RefAttributes<ImperativePanelHandle>>;
export type PanelGroupProps = {
    autoSaveId?: string;
    children?: ReactNode;
    className?: string;
    direction: Direction;
    id?: string | null;
    onLayout?: PanelGroupOnLayout;
    style?: CSSProperties;
    tagName?: ElementType;
};
export function PanelGroup({ autoSaveId, children, className: classNameFromProps, direction, id: idFromProps, onLayout, style: styleFromProps, tagName: Type, }: PanelGroupProps): import("react").FunctionComponentElement<import("react").ProviderProps<{
    activeHandleId: string;
    collapsePanel: (id: string) => void;
    direction: "horizontal" | "vertical";
    expandPanel: (id: string) => void;
    getPanelStyle: (id: string) => CSSProperties;
    groupId: string;
    registerPanel: (id: string, panel: PanelData) => void;
    registerResizeHandle: (id: string) => import("types").ResizeHandler;
    resizePanel: (id: string, percentage: number) => void;
    startDragging: (id: string, event: ResizeEvent) => void;
    stopDragging: () => void;
    unregisterPanel: (id: string) => void;
}>>;
export type PanelResizeHandleProps = {
    children?: ReactNode;
    className?: string;
    disabled?: boolean;
    id?: string | null;
    style?: CSSProperties;
    tagName?: ElementType;
};
export function PanelResizeHandle({ children, className: classNameFromProps, disabled, id: idFromProps, style: styleFromProps, tagName: Type, }: PanelResizeHandleProps): import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>;

//# sourceMappingURL=react-resizable-panels.d.ts.map
